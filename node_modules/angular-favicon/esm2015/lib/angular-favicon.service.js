/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-favicon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, RendererFactory2 } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEventPattern } from 'rxjs';
import { pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * A service to set the favicon.
 */
export class AngularFaviconService {
    /**
     * @param {?} _doc
     * @param {?} rendererFactory
     */
    constructor(_doc, rendererFactory) {
        this._doc = _doc;
        this.rendererFactory = rendererFactory;
        this.darkScheme = '(prefers-color-scheme:dark)';
        this.prefersColorScheme$ = fromEventPattern((/**
         * @param {?} handler
         * @return {?}
         */
        handler => window.matchMedia(this.darkScheme).addListener((/** @type {?} */ (handler))))).pipe(pluck('matches'));
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * Get the favicon of the current HTML document.
     * @return {?}
     */
    getFavicon() {
        return this._doc.querySelector("link[rel*='icon']");
    }
    /**
     * Set the title of the current HTML document.
     * @param {?} iconURL - Default favicon URL
     * @param {?=} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    setFavicon(iconURL, altIconURL) {
        /** @type {?} */
        const link = this.getFavicon() || this.renderer.createElement('link');
        /** @type {?} */
        let currentLinkHref = iconURL;
        if (altIconURL) {
            this.subscribeToChangesInTheme(link, iconURL, altIconURL);
            if (window.matchMedia(this.darkScheme).matches) {
                currentLinkHref = altIconURL;
            }
        }
        this.appendLinkTag(link, currentLinkHref);
    }
    /**
     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - Default favicon URL
     * @param {?} altIconURL - Optional, dark theme favicon URL
     * @return {?}
     */
    subscribeToChangesInTheme(link, iconURL, altIconURL) {
        this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe((/**
         * @param {?} isDarkTheme
         * @return {?}
         */
        isDarkTheme => {
            if (isDarkTheme) {
                this.appendLinkTag(link, altIconURL);
            }
            else {
                this.appendLinkTag(link, iconURL);
            }
        }));
    }
    /**
     * Append new link to HEAD
     * @private
     * @param {?} link - DOM element
     * @param {?} iconURL - favicon URL
     * @return {?}
     */
    appendLinkTag(link, iconURL) {
        link.type = 'image/x-icon';
        link.rel = 'shortcut icon';
        link.href = iconURL;
        /** @type {?} */
        const head = this._doc.getElementsByTagName('head')[0];
        this.renderer.appendChild(head, link);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptionToColorScheme) {
            this.subscriptionToColorScheme.unsubscribe();
        }
    }
}
AngularFaviconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AngularFaviconService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: RendererFactory2 }
];
/** @nocollapse */ AngularFaviconService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFaviconService_Factory() { return new AngularFaviconService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.RendererFactory2)); }, token: AngularFaviconService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.darkScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.subscriptionToColorScheme;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.prefersColorScheme$;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype._doc;
    /**
     * @type {?}
     * @private
     */
    AngularFaviconService.prototype.rendererFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1mYXZpY29uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RpZWdvcG0vV29ya3NwYWNlL1BlcnNvbmFsL25neC1mYXZpY29uL3Byb2plY3RzL2FuZ3VsYXItZmF2aWNvbi9zcmMvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1mYXZpY29uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBd0IsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFRdkMsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFHaEMsWUFBc0MsSUFBUyxFQUFVLGVBQWlDO1FBQXBELFNBQUksR0FBSixJQUFJLENBQUs7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFJbEYsZUFBVSxHQUFHLDZCQUE2QixDQUFDO1FBRTNDLHdCQUFtQixHQUFHLGdCQUFnQjs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLG1CQUFBLE9BQU8sRUFBaUIsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUN0SSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQ2pCLENBQUM7UUFQQSxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBV0QsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7O0lBT0QsVUFBVSxDQUFDLE9BQWUsRUFBRSxVQUFtQjs7Y0FDdkMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7O1lBQ2pFLGVBQWUsR0FBRyxPQUFPO1FBRTdCLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFMUQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQzlDLGVBQWUsR0FBRyxVQUFVLENBQUM7YUFDOUI7U0FDRjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7Ozs7OztJQVFPLHlCQUF5QixDQUFDLElBQVMsRUFBRSxPQUFlLEVBQUUsVUFBa0I7UUFDOUUsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTOzs7O1FBQUMsV0FBVyxDQUFDLEVBQUU7WUFDaEYsSUFBSSxXQUFXLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDbkM7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7O0lBT08sYUFBYSxDQUFDLElBQVMsRUFBRSxPQUFlO1FBQzlDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsZUFBZSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDOztjQUNkLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNsQyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDOUM7SUFDSCxDQUFDOzs7WUE1RUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OzRDQUljLE1BQU0sU0FBQyxRQUFRO1lBZHFCLGdCQUFnQjs7Ozs7Ozs7SUFZakUseUNBQTRCOzs7OztJQU01QiwyQ0FBbUQ7Ozs7O0lBQ25ELDBEQUFnRDs7Ozs7SUFDaEQsb0RBRUU7Ozs7O0lBUlUscUNBQW1DOzs7OztJQUFFLGdEQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGZyb21FdmVudFBhdHRlcm4sIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcGx1Y2sgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQSBzZXJ2aWNlIHRvIHNldCB0aGUgZmF2aWNvbi5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZhdmljb25TZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvYzogYW55LCBwcml2YXRlIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5Mikge1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gIH1cblxuICBwcml2YXRlIGRhcmtTY2hlbWUgPSAnKHByZWZlcnMtY29sb3Itc2NoZW1lOmRhcmspJztcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25Ub0NvbG9yU2NoZW1lOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgcHJlZmVyc0NvbG9yU2NoZW1lJCA9IGZyb21FdmVudFBhdHRlcm4oaGFuZGxlciA9PiB3aW5kb3cubWF0Y2hNZWRpYSh0aGlzLmRhcmtTY2hlbWUpLmFkZExpc3RlbmVyKGhhbmRsZXIgYXMgRXZlbnRMaXN0ZW5lcikpLnBpcGUoXG4gICAgcGx1Y2soJ21hdGNoZXMnKVxuICApO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZhdmljb24gb2YgdGhlIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cbiAgICovXG4gIGdldEZhdmljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvYy5xdWVyeVNlbGVjdG9yKFwibGlua1tyZWwqPSdpY29uJ11cIik7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB0aXRsZSBvZiB0aGUgY3VycmVudCBIVE1MIGRvY3VtZW50LlxuICAgKiBAcGFyYW0gaWNvblVSTCAtIERlZmF1bHQgZmF2aWNvbiBVUkxcbiAgICogQHBhcmFtIGFsdEljb25VUkwgLSBPcHRpb25hbCwgZGFyayB0aGVtZSBmYXZpY29uIFVSTFxuICAgKi9cbiAgc2V0RmF2aWNvbihpY29uVVJMOiBzdHJpbmcsIGFsdEljb25VUkw/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5nZXRGYXZpY29uKCkgfHwgdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgbGV0IGN1cnJlbnRMaW5rSHJlZiA9IGljb25VUkw7XG5cbiAgICBpZiAoYWx0SWNvblVSTCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmVUb0NoYW5nZXNJblRoZW1lKGxpbmssIGljb25VUkwsIGFsdEljb25VUkwpO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEodGhpcy5kYXJrU2NoZW1lKS5tYXRjaGVzKSB7XG4gICAgICAgIGN1cnJlbnRMaW5rSHJlZiA9IGFsdEljb25VUkw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcHBlbmRMaW5rVGFnKGxpbmssIGN1cnJlbnRMaW5rSHJlZik7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSB0aGVtZSBjb2xvciBjaGFuZ2VzIGluIGJyb3dzZXIvT1MgYW5kIGFwcGx5IHRoZSBhcHByb3BpYXRlIGZhdmljb25cbiAgICogQHBhcmFtIGxpbmsgLSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0gaWNvblVSTCAtIERlZmF1bHQgZmF2aWNvbiBVUkxcbiAgICogQHBhcmFtIGFsdEljb25VUkwgLSBPcHRpb25hbCwgZGFyayB0aGVtZSBmYXZpY29uIFVSTFxuICAgKi9cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb0NoYW5nZXNJblRoZW1lKGxpbms6IGFueSwgaWNvblVSTDogc3RyaW5nLCBhbHRJY29uVVJMOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvblRvQ29sb3JTY2hlbWUgPSB0aGlzLnByZWZlcnNDb2xvclNjaGVtZSQuc3Vic2NyaWJlKGlzRGFya1RoZW1lID0+IHtcbiAgICAgIGlmIChpc0RhcmtUaGVtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZExpbmtUYWcobGluaywgYWx0SWNvblVSTCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGVuZExpbmtUYWcobGluaywgaWNvblVSTCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kIG5ldyBsaW5rIHRvIEhFQURcbiAgICogQHBhcmFtIGxpbmsgLSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0gaWNvblVSTCAtIGZhdmljb24gVVJMXG4gICAqL1xuICBwcml2YXRlIGFwcGVuZExpbmtUYWcobGluazogYW55LCBpY29uVVJMOiBzdHJpbmcpIHtcbiAgICBsaW5rLnR5cGUgPSAnaW1hZ2UveC1pY29uJztcbiAgICBsaW5rLnJlbCA9ICdzaG9ydGN1dCBpY29uJztcbiAgICBsaW5rLmhyZWYgPSBpY29uVVJMO1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLl9kb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKGhlYWQsIGxpbmspO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uVG9Db2xvclNjaGVtZSkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25Ub0NvbG9yU2NoZW1lLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=